filetype off                  " required
" Set interactive bash as default vim shell - for vim-instant-markdown plugin
set shell=bash\ -i

" Set colors
set term=xterm-256color
set termguicolors
set textwidth&
set colorcolumn&
set relativenumber

" Set 10ms for timeout length
set ttimeoutlen=10

" Split edit your vimrc. Type space, v, r in sequence to trigger
nmap <leader>vr :sp $MYVIMRC<cr>

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nmap <leader>so :source $MYVIMRC<cr>

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Colors / highlighting
syntax enable
colorscheme one
set background=dark

" lightline settings
" Always display the tabline, even if there is only one tab
set showtabline=2
" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'relativepath', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
hi Search cterm=NONE ctermbg=LightGreen

autocmd BufNewFile,BufRead Gemfile set filetype=ruby

"" Map ctrl+p to fzf
nnoremap <c-p> :GFiles<cr>

"" Map ctrl-g to fzf ripgrep
nnoremap <c-g> :Rg<Cr>

" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

" Directory and highlight search"
set hlsearch
nmap <leader>h :nohlsearch<cr>

" Trim trailing whitespace"
function! TrimWhiteSpace()
    %s/\s\+$//e
endfunction
autocmd BufWritePre * :call TrimWhiteSpace()

" Set case insensitive search
set ignorecase
set smartcase

" Set cursorlines
set cursorline cursorcolumn

" Set lazyredraw - faster scroll
set lazyredraw

" Command aliases for typoed commands (accidentally holding shift too long)
command! Q q " Bind :Q to :q
command! Qa qall

" Toggle line numbers
nmap <leader>rn :set rnu!<cr>
nmap <leader>nu :set nu!<cr>

" Toggle indent guides
nmap <leader>in :IndentGuidesToggle<cr>

" Turn on rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Syntax linter
let g:ale_lint_delay = 200 " Default 200
let g:ale_lint_on_enter = 0
let g:ale_warn_about_trailing_whitespace = 0
let g:ale_linters = {
\  'html'         : ['HTMLHint'],
\  'javascript'   : ['eslint'],
\  'java'         : ['checkstyle'],
\  'json'         : ['json-lint'],
\  'markdown'     : ['mdl', 'proselint', 'vale'],
\  'ruby'         : ['rubocop'],
\  'sass'         : ['sass-lint'],
\  'scss'         : ['sass-lint'],
\  'sql'          : ['sqlint'],
\  'yaml'         : ['swaglint'],
\}

" Quick Explore
nmap <leader>e :Explore<cr>

" Quick buffers
nnoremap ; :Buff<cr>

" Rename file
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

noremap <leader>n :call RenameFile()<cr>

" Tabularize shortcuts
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a> :Tabularize /=><CR>
  vmap <Leader>a> :Tabularize /=><CR>
  nmap <Leader>a{ :Tabularize /{<CR>
  vmap <Leader>a{ :Tabularize /{<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

" Go
" Jump between quickfix list
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>
let g:go_fmt_command = "gofmt"

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)

" Ruby/Rails
" Replace new ruby hash syntax with hash rockets
noremap <leader>ro :%s/\(\w*\): \([':]\)/:\1 => \2/gc

" Insert pry
map <Leader>bp orequire'pry';binding.pry<esc>:w<cr>

" Copy vim text to OSX clipboard
map <C-x> :!pbcopy<CR>
map <C-c> :w !pbcopy<CR><CR>

" Set paste toggle
" set pastetoggle=<F2>

" bind K to grep word under cursor
" nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
